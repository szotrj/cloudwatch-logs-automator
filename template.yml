AWSTemplateFormatVersion: 2010-09-09
Transform: 'AWS::Serverless-2016-10-31'
Description: Automatically send CloudWatch Logs to Splunk
Globals:
  Function:
    MemorySize: 128
    Timeout: 30
    VpcConfig:
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetIds:
        - !Select [ 0, !Ref SubnetIds ]
        - !Select [ 1, !Ref SubnetIds ]
    KmsKeyArn: !Ref KmsKeyArn
    DeadLetterQueue:
      Type: SQS
      TargetArn: !GetAtt SqsDlQueue.Arn
Parameters:
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: Security Group ID
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of Subnet Ids (select 2)
  KmsKeyArn:
    Type: String
    Description: "Enter KMS Key ARN used for encryption"
  LogGroupPattern:
    Type: String
    Default: "/aws/lambda"
    Description: "Enter regex for matching logGroups"
  UseExistingLogs:
    Type: String
    Default: "false"
    AllowedValues: ["true", "false"]
    Description: "Select true for subscribing existing logs"
  LogGroupTags:
    Type: CommaDelimitedList
    Default: ""
    Description: "Enter comma separated keyvalue pairs for filtering logGroups using tags. Ex KeyName1=string,KeyName2=string. This is optional leave it blank if tag based filtering is not needed."
  SplunkHttpEventCollectorToken:
    Type: String
    Description: Splunk HEC Token
    NoEcho: true
  SplunkHttpEventCollectorURL:
    Type: String
    Description: Splunk HEC URL
    Default: https://url:8088/services/collector
Resources:
  CloudWatchLogsSubscriberFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/index.py
      Handler: index.lambda_handler
      Runtime: python3.7
      Environment:
        Variables:
          PARTITION: !Ref 'AWS::Partition'
          REGION: !Ref 'AWS::Region'
          LAMBDA_ARN: !GetAtt SplunkCloudWatchLogsProcessorFunction.Arn
          LOG_GROUP_PATTERN: !Ref LogGroupPattern
          USE_EXISTING_LOG_GROUPS: !Ref UseExistingLogs
          LOG_GROUP_TAGS: !Join [",", {"Ref": "LogGroupTags"} ]
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - Statement:
          - Sid: ReadWriteFilterPolicy
            Effect: Allow
            Action:
              - logs:DescribeLogGroups
              - logs:DescribeLogStreams
              - logs:PutSubscriptionFilter
            Resource:
              - !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*'
          - Sid: AllowSQSDlq
            Effect: Allow
            Action:
            - sqs:SendMessage
            Resource:
              - !GetAtt SqsDlQueue.Arn
      Events:
        LambdaTrigger:
          Type: CloudWatchEvent
          Properties:
            Pattern:
              source:
                - aws.logs
              detail:
                eventSource:
                  - logs.amazonaws.com
                eventName:
                  - CreateLogGroup
  CloudWatchLogsSubscriberFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${CloudWatchLogsSubscriberFunction}
  CWLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SplunkCloudWatchLogsProcessorFunction
      Principal: !Sub 'logs.${AWS::Region}.amazonaws.com'
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub 'arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*'
  SplunkCloudWatchLogsProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs10.x
      CodeUri: src/
      Description: Stream events from AWS CloudWatch Logs to Splunk HTTP event collector
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          SPLUNK_HEC_URL: !Ref SplunkHttpEventCollectorURL
          SPLUNK_HEC_TOKEN: !Ref SplunkHttpEventCollectorToken
  CloudWatchLogsSubscriberFunctionErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: When an Lambda error occurs, it will be notified via SNS
      Namespace: AWS/Lambda
      MetricName: Errors
      Dimensions:
      - Name: FunctionName
        Value: !Ref CloudWatchLogsSubscriberFunction
      Statistic: Sum
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: 1
      Period: 60
      EvaluationPeriods: 1
      AlarmActions:
        - !Ref SnsTopicArn
      TreatMissingData: notBreaching
  SqsDlQueue:
    Type: 'AWS::SQS::Queue'
    Properties:
      KmsMasterKeyId: !Ref KmsKeyId
  SqsDlQueueDepthAlarm:
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: Alarm if queue depth grows beyond 0 messages
      Namespace: AWS/SQS
      MetricName: ApproximateNumberOfMessagesVisible
      Dimensions:
        - Name: QueueName
          Value: !GetAtt SqsDlQueue.QueueName
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref SnsTopicArn
      TreatMissingData: notBreaching
